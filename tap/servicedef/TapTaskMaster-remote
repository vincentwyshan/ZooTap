#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from tap.servicedef import TapTaskMaster
from tap.servicedef.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void ping()')
  print('  i32 host_register(string ip_address, string node_name, string sys_name, string release, string version, string machine, i32 cpu_count, i64 memory_total, string old_ip_address, string old_node_name)')
  print('  void host_status(i32 host_id, double load_average, i64 disk_remain, double percent_cpu, double percent_memory, i64 network_sent, i64 network_recv)')
  print('   job_request(i32 host_id)')
  print('  void job_start(i32 host_id, i32 job_id)')
  print('  void job_done(i32 host_id, i32 job_id, bool success, double elapse, string message)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TapTaskMaster.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'host_register':
  if len(args) != 10:
    print('host_register requires 10 args')
    sys.exit(1)
  pp.pprint(client.host_register(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),eval(args[7]),args[8],args[9],))

elif cmd == 'host_status':
  if len(args) != 7:
    print('host_status requires 7 args')
    sys.exit(1)
  pp.pprint(client.host_status(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'job_request':
  if len(args) != 1:
    print('job_request requires 1 args')
    sys.exit(1)
  pp.pprint(client.job_request(eval(args[0]),))

elif cmd == 'job_start':
  if len(args) != 2:
    print('job_start requires 2 args')
    sys.exit(1)
  pp.pprint(client.job_start(eval(args[0]),eval(args[1]),))

elif cmd == 'job_done':
  if len(args) != 5:
    print('job_done requires 5 args')
    sys.exit(1)
  pp.pprint(client.job_done(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
