#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def ping(self):
    pass

  def host_register(self, ip_address, node_name, sys_name, release, version, machine, cpu_count, memory_total, old_ip_address, old_node_name):
    """
    Parameters:
     - ip_address
     - node_name
     - sys_name
     - release
     - version
     - machine
     - cpu_count
     - memory_total
     - old_ip_address
     - old_node_name
    """
    pass

  def host_status(self, host_id, load_average, disk_remain, percent_cpu, percent_memory, network_sent, network_recv):
    """
    Parameters:
     - host_id
     - load_average
     - disk_remain
     - percent_cpu
     - percent_memory
     - network_sent
     - network_recv
    """
    pass

  def job_request(self, host_id):
    """
    Parameters:
     - host_id
    """
    pass

  def job_start(self, host_id, job_id):
    """
    Parameters:
     - host_id
     - job_id
    """
    pass

  def job_done(self, host_id, job_id, success, elapse, message):
    """
    Parameters:
     - host_id
     - job_id
     - success
     - elapse
     - message
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def ping(self):
    self.send_ping()
    self.recv_ping()

  def send_ping(self):
    self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ping(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ping_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return

  def host_register(self, ip_address, node_name, sys_name, release, version, machine, cpu_count, memory_total, old_ip_address, old_node_name):
    """
    Parameters:
     - ip_address
     - node_name
     - sys_name
     - release
     - version
     - machine
     - cpu_count
     - memory_total
     - old_ip_address
     - old_node_name
    """
    self.send_host_register(ip_address, node_name, sys_name, release, version, machine, cpu_count, memory_total, old_ip_address, old_node_name)
    return self.recv_host_register()

  def send_host_register(self, ip_address, node_name, sys_name, release, version, machine, cpu_count, memory_total, old_ip_address, old_node_name):
    self._oprot.writeMessageBegin('host_register', TMessageType.CALL, self._seqid)
    args = host_register_args()
    args.ip_address = ip_address
    args.node_name = node_name
    args.sys_name = sys_name
    args.release = release
    args.version = version
    args.machine = machine
    args.cpu_count = cpu_count
    args.memory_total = memory_total
    args.old_ip_address = old_ip_address
    args.old_node_name = old_node_name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_host_register(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = host_register_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error is not None:
      raise result.error
    raise TApplicationException(TApplicationException.MISSING_RESULT, "host_register failed: unknown result")

  def host_status(self, host_id, load_average, disk_remain, percent_cpu, percent_memory, network_sent, network_recv):
    """
    Parameters:
     - host_id
     - load_average
     - disk_remain
     - percent_cpu
     - percent_memory
     - network_sent
     - network_recv
    """
    self.send_host_status(host_id, load_average, disk_remain, percent_cpu, percent_memory, network_sent, network_recv)
    self.recv_host_status()

  def send_host_status(self, host_id, load_average, disk_remain, percent_cpu, percent_memory, network_sent, network_recv):
    self._oprot.writeMessageBegin('host_status', TMessageType.CALL, self._seqid)
    args = host_status_args()
    args.host_id = host_id
    args.load_average = load_average
    args.disk_remain = disk_remain
    args.percent_cpu = percent_cpu
    args.percent_memory = percent_memory
    args.network_sent = network_sent
    args.network_recv = network_recv
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_host_status(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = host_status_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.error is not None:
      raise result.error
    return

  def job_request(self, host_id):
    """
    Parameters:
     - host_id
    """
    self.send_job_request(host_id)
    return self.recv_job_request()

  def send_job_request(self, host_id):
    self._oprot.writeMessageBegin('job_request', TMessageType.CALL, self._seqid)
    args = job_request_args()
    args.host_id = host_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_job_request(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = job_request_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error is not None:
      raise result.error
    raise TApplicationException(TApplicationException.MISSING_RESULT, "job_request failed: unknown result")

  def job_start(self, host_id, job_id):
    """
    Parameters:
     - host_id
     - job_id
    """
    self.send_job_start(host_id, job_id)
    self.recv_job_start()

  def send_job_start(self, host_id, job_id):
    self._oprot.writeMessageBegin('job_start', TMessageType.CALL, self._seqid)
    args = job_start_args()
    args.host_id = host_id
    args.job_id = job_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_job_start(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = job_start_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return

  def job_done(self, host_id, job_id, success, elapse, message):
    """
    Parameters:
     - host_id
     - job_id
     - success
     - elapse
     - message
    """
    self.send_job_done(host_id, job_id, success, elapse, message)
    self.recv_job_done()

  def send_job_done(self, host_id, job_id, success, elapse, message):
    self._oprot.writeMessageBegin('job_done', TMessageType.CALL, self._seqid)
    args = job_done_args()
    args.host_id = host_id
    args.job_id = job_id
    args.success = success
    args.elapse = elapse
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_job_done(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = job_done_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["ping"] = Processor.process_ping
    self._processMap["host_register"] = Processor.process_host_register
    self._processMap["host_status"] = Processor.process_host_status
    self._processMap["job_request"] = Processor.process_job_request
    self._processMap["job_start"] = Processor.process_job_start
    self._processMap["job_done"] = Processor.process_job_done

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    try:
      self._handler.ping()
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("ping", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_host_register(self, seqid, iprot, oprot):
    args = host_register_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = host_register_result()
    try:
      result.success = self._handler.host_register(args.ip_address, args.node_name, args.sys_name, args.release, args.version, args.machine, args.cpu_count, args.memory_total, args.old_ip_address, args.old_node_name)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except TapError as error:
      msg_type = TMessageType.REPLY
      result.error = error
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("host_register", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_host_status(self, seqid, iprot, oprot):
    args = host_status_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = host_status_result()
    try:
      self._handler.host_status(args.host_id, args.load_average, args.disk_remain, args.percent_cpu, args.percent_memory, args.network_sent, args.network_recv)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except TapError as error:
      msg_type = TMessageType.REPLY
      result.error = error
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("host_status", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_job_request(self, seqid, iprot, oprot):
    args = job_request_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = job_request_result()
    try:
      result.success = self._handler.job_request(args.host_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except TapError as error:
      msg_type = TMessageType.REPLY
      result.error = error
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("job_request", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_job_start(self, seqid, iprot, oprot):
    args = job_start_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = job_start_result()
    try:
      self._handler.job_start(args.host_id, args.job_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("job_start", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_job_done(self, seqid, iprot, oprot):
    args = job_done_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = job_done_result()
    try:
      self._handler.job_done(args.host_id, args.job_id, args.success, args.elapse, args.message)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("job_done", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class ping_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class host_register_args:
  """
  Attributes:
   - ip_address
   - node_name
   - sys_name
   - release
   - version
   - machine
   - cpu_count
   - memory_total
   - old_ip_address
   - old_node_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ip_address', None, None, ), # 1
    (2, TType.STRING, 'node_name', None, None, ), # 2
    (3, TType.STRING, 'sys_name', None, None, ), # 3
    (4, TType.STRING, 'release', None, None, ), # 4
    (5, TType.STRING, 'version', None, None, ), # 5
    (6, TType.STRING, 'machine', None, None, ), # 6
    (7, TType.I32, 'cpu_count', None, None, ), # 7
    (8, TType.I64, 'memory_total', None, None, ), # 8
    (9, TType.STRING, 'old_ip_address', None, None, ), # 9
    (10, TType.STRING, 'old_node_name', None, None, ), # 10
  )

  def __init__(self, ip_address=None, node_name=None, sys_name=None, release=None, version=None, machine=None, cpu_count=None, memory_total=None, old_ip_address=None, old_node_name=None,):
    self.ip_address = ip_address
    self.node_name = node_name
    self.sys_name = sys_name
    self.release = release
    self.version = version
    self.machine = machine
    self.cpu_count = cpu_count
    self.memory_total = memory_total
    self.old_ip_address = old_ip_address
    self.old_node_name = old_node_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ip_address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.node_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sys_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.release = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.version = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.machine = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cpu_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.memory_total = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.old_ip_address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.old_node_name = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('host_register_args')
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRING, 1)
      oprot.writeString(self.ip_address)
      oprot.writeFieldEnd()
    if self.node_name is not None:
      oprot.writeFieldBegin('node_name', TType.STRING, 2)
      oprot.writeString(self.node_name)
      oprot.writeFieldEnd()
    if self.sys_name is not None:
      oprot.writeFieldBegin('sys_name', TType.STRING, 3)
      oprot.writeString(self.sys_name)
      oprot.writeFieldEnd()
    if self.release is not None:
      oprot.writeFieldBegin('release', TType.STRING, 4)
      oprot.writeString(self.release)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 5)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.machine is not None:
      oprot.writeFieldBegin('machine', TType.STRING, 6)
      oprot.writeString(self.machine)
      oprot.writeFieldEnd()
    if self.cpu_count is not None:
      oprot.writeFieldBegin('cpu_count', TType.I32, 7)
      oprot.writeI32(self.cpu_count)
      oprot.writeFieldEnd()
    if self.memory_total is not None:
      oprot.writeFieldBegin('memory_total', TType.I64, 8)
      oprot.writeI64(self.memory_total)
      oprot.writeFieldEnd()
    if self.old_ip_address is not None:
      oprot.writeFieldBegin('old_ip_address', TType.STRING, 9)
      oprot.writeString(self.old_ip_address)
      oprot.writeFieldEnd()
    if self.old_node_name is not None:
      oprot.writeFieldBegin('old_node_name', TType.STRING, 10)
      oprot.writeString(self.old_node_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ip_address)
    value = (value * 31) ^ hash(self.node_name)
    value = (value * 31) ^ hash(self.sys_name)
    value = (value * 31) ^ hash(self.release)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.machine)
    value = (value * 31) ^ hash(self.cpu_count)
    value = (value * 31) ^ hash(self.memory_total)
    value = (value * 31) ^ hash(self.old_ip_address)
    value = (value * 31) ^ hash(self.old_node_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class host_register_result:
  """
  Attributes:
   - success
   - error
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'error', (TapError, TapError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, error=None,):
    self.success = success
    self.error = error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error = TapError()
          self.error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('host_register_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.STRUCT, 1)
      self.error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class host_status_args:
  """
  Attributes:
   - host_id
   - load_average
   - disk_remain
   - percent_cpu
   - percent_memory
   - network_sent
   - network_recv
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'host_id', None, None, ), # 1
    (2, TType.DOUBLE, 'load_average', None, None, ), # 2
    (3, TType.I64, 'disk_remain', None, None, ), # 3
    (4, TType.DOUBLE, 'percent_cpu', None, None, ), # 4
    (5, TType.DOUBLE, 'percent_memory', None, None, ), # 5
    (6, TType.I64, 'network_sent', None, None, ), # 6
    (7, TType.I64, 'network_recv', None, None, ), # 7
  )

  def __init__(self, host_id=None, load_average=None, disk_remain=None, percent_cpu=None, percent_memory=None, network_sent=None, network_recv=None,):
    self.host_id = host_id
    self.load_average = load_average
    self.disk_remain = disk_remain
    self.percent_cpu = percent_cpu
    self.percent_memory = percent_memory
    self.network_sent = network_sent
    self.network_recv = network_recv

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.host_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.load_average = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.disk_remain = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.percent_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.percent_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.network_sent = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.network_recv = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('host_status_args')
    if self.host_id is not None:
      oprot.writeFieldBegin('host_id', TType.I32, 1)
      oprot.writeI32(self.host_id)
      oprot.writeFieldEnd()
    if self.load_average is not None:
      oprot.writeFieldBegin('load_average', TType.DOUBLE, 2)
      oprot.writeDouble(self.load_average)
      oprot.writeFieldEnd()
    if self.disk_remain is not None:
      oprot.writeFieldBegin('disk_remain', TType.I64, 3)
      oprot.writeI64(self.disk_remain)
      oprot.writeFieldEnd()
    if self.percent_cpu is not None:
      oprot.writeFieldBegin('percent_cpu', TType.DOUBLE, 4)
      oprot.writeDouble(self.percent_cpu)
      oprot.writeFieldEnd()
    if self.percent_memory is not None:
      oprot.writeFieldBegin('percent_memory', TType.DOUBLE, 5)
      oprot.writeDouble(self.percent_memory)
      oprot.writeFieldEnd()
    if self.network_sent is not None:
      oprot.writeFieldBegin('network_sent', TType.I64, 6)
      oprot.writeI64(self.network_sent)
      oprot.writeFieldEnd()
    if self.network_recv is not None:
      oprot.writeFieldBegin('network_recv', TType.I64, 7)
      oprot.writeI64(self.network_recv)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host_id)
    value = (value * 31) ^ hash(self.load_average)
    value = (value * 31) ^ hash(self.disk_remain)
    value = (value * 31) ^ hash(self.percent_cpu)
    value = (value * 31) ^ hash(self.percent_memory)
    value = (value * 31) ^ hash(self.network_sent)
    value = (value * 31) ^ hash(self.network_recv)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class host_status_result:
  """
  Attributes:
   - error
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'error', (TapError, TapError.thrift_spec), None, ), # 1
  )

  def __init__(self, error=None,):
    self.error = error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.error = TapError()
          self.error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('host_status_result')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.STRUCT, 1)
      self.error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class job_request_args:
  """
  Attributes:
   - host_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'host_id', None, None, ), # 1
  )

  def __init__(self, host_id=None,):
    self.host_id = host_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.host_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('job_request_args')
    if self.host_id is not None:
      oprot.writeFieldBegin('host_id', TType.I32, 1)
      oprot.writeI32(self.host_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class job_request_result:
  """
  Attributes:
   - success
   - error
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'error', (TapError, TapError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, error=None,):
    self.success = success
    self.error = error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString()
            _val15 = iprot.readString()
            self.success[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error = TapError()
          self.error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('job_request_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter16,viter17 in self.success.items():
        oprot.writeString(kiter16)
        oprot.writeString(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.STRUCT, 1)
      self.error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class job_start_args:
  """
  Attributes:
   - host_id
   - job_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'host_id', None, None, ), # 1
    (2, TType.I32, 'job_id', None, None, ), # 2
  )

  def __init__(self, host_id=None, job_id=None,):
    self.host_id = host_id
    self.job_id = job_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.host_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.job_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('job_start_args')
    if self.host_id is not None:
      oprot.writeFieldBegin('host_id', TType.I32, 1)
      oprot.writeI32(self.host_id)
      oprot.writeFieldEnd()
    if self.job_id is not None:
      oprot.writeFieldBegin('job_id', TType.I32, 2)
      oprot.writeI32(self.job_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host_id)
    value = (value * 31) ^ hash(self.job_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class job_start_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('job_start_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class job_done_args:
  """
  Attributes:
   - host_id
   - job_id
   - success
   - elapse
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'host_id', None, None, ), # 1
    (2, TType.I32, 'job_id', None, None, ), # 2
    (3, TType.BOOL, 'success', None, None, ), # 3
    (4, TType.DOUBLE, 'elapse', None, None, ), # 4
    (5, TType.STRING, 'message', None, None, ), # 5
  )

  def __init__(self, host_id=None, job_id=None, success=None, elapse=None, message=None,):
    self.host_id = host_id
    self.job_id = job_id
    self.success = success
    self.elapse = elapse
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.host_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.job_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.success = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.elapse = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('job_done_args')
    if self.host_id is not None:
      oprot.writeFieldBegin('host_id', TType.I32, 1)
      oprot.writeI32(self.host_id)
      oprot.writeFieldEnd()
    if self.job_id is not None:
      oprot.writeFieldBegin('job_id', TType.I32, 2)
      oprot.writeI32(self.job_id)
      oprot.writeFieldEnd()
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 3)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.elapse is not None:
      oprot.writeFieldBegin('elapse', TType.DOUBLE, 4)
      oprot.writeDouble(self.elapse)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 5)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host_id)
    value = (value * 31) ^ hash(self.job_id)
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.elapse)
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class job_done_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('job_done_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
